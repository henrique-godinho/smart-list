// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, hashed_password, first_name, last_name
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, created_at, updated_at, email, hashed_password, is_active, first_name, last_name
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
	FirstName      string
	LastName       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsActive,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, first_name, last_name, is_active, created_at, updated_at, hashed_password
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID             uuid.UUID
	Email          string
	FirstName      string
	LastName       string
	IsActive       bool
	CreatedAt      time.Time
	UpdatedAt      time.Time
	HashedPassword string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
	)
	return i, err
}
