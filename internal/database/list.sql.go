// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: list.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createNewList = `-- name: CreateNewList :one
INSERT INtO list (user_id, name,  frequency, target_date)
VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, name, frequency, target_date
`

type CreateNewListParams struct {
	UserID     uuid.UUID
	Name       string
	Frequency  sql.NullString
	TargetDate sql.NullTime
}

type CreateNewListRow struct {
	ID         uuid.UUID
	Name       string
	Frequency  sql.NullString
	TargetDate sql.NullTime
}

func (q *Queries) CreateNewList(ctx context.Context, arg CreateNewListParams) (CreateNewListRow, error) {
	row := q.db.QueryRowContext(ctx, createNewList,
		arg.UserID,
		arg.Name,
		arg.Frequency,
		arg.TargetDate,
	)
	var i CreateNewListRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Frequency,
		&i.TargetDate,
	)
	return i, err
}

const getListsByUserId = `-- name: GetListsByUserId :many
SELECT
  l.id          AS list_id,
  l.name       AS list_name,
  l.frequency,
  l.target_date,
  l.updated_at  AS list_updated_at,
  li.id         AS item_id,
  li.name       AS item_name,
  li.qty,
  li.unit,
  li.price,
  li.created_at AS item_created_at,
  li.updated_at AS item_updated_at
FROM list l
LEFT JOIN list_items li ON li.list_id = l.id
WHERE l.user_id = $1
ORDER BY l.updated_at DESC
`

type GetListsByUserIdRow struct {
	ListID        uuid.UUID
	ListName      string
	Frequency     sql.NullString
	TargetDate    sql.NullTime
	ListUpdatedAt sql.NullTime
	ItemID        sql.NullInt64
	ItemName      sql.NullString
	Qty           sql.NullInt16
	Unit          sql.NullString
	Price         sql.NullInt16
	ItemCreatedAt sql.NullTime
	ItemUpdatedAt sql.NullTime
}

func (q *Queries) GetListsByUserId(ctx context.Context, userID uuid.UUID) ([]GetListsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getListsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListsByUserIdRow
	for rows.Next() {
		var i GetListsByUserIdRow
		if err := rows.Scan(
			&i.ListID,
			&i.ListName,
			&i.Frequency,
			&i.TargetDate,
			&i.ListUpdatedAt,
			&i.ItemID,
			&i.ItemName,
			&i.Qty,
			&i.Unit,
			&i.Price,
			&i.ItemCreatedAt,
			&i.ItemUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpdatedListById = `-- name: GetUpdatedListById :many
SELECT li.id as item_id, li.list_id, li.name, li.qty, li.unit, li.price, li.updated_at, l.name as list_name, l.frequency, l.target_date, l.updated_at as list_updated_at
from list_items li
join list l on l.id = li.list_id
where list_id = $1
order by li.id
`

type GetUpdatedListByIdRow struct {
	ItemID        int64
	ListID        uuid.UUID
	Name          string
	Qty           sql.NullInt16
	Unit          sql.NullString
	Price         sql.NullInt16
	UpdatedAt     sql.NullTime
	ListName      string
	Frequency     sql.NullString
	TargetDate    sql.NullTime
	ListUpdatedAt sql.NullTime
}

func (q *Queries) GetUpdatedListById(ctx context.Context, listID uuid.UUID) ([]GetUpdatedListByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getUpdatedListById, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUpdatedListByIdRow
	for rows.Next() {
		var i GetUpdatedListByIdRow
		if err := rows.Scan(
			&i.ItemID,
			&i.ListID,
			&i.Name,
			&i.Qty,
			&i.Unit,
			&i.Price,
			&i.UpdatedAt,
			&i.ListName,
			&i.Frequency,
			&i.TargetDate,
			&i.ListUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeItemsFromUserList = `-- name: RemoveItemsFromUserList :exec
DELETE FROM list_items li
WHERE li.list_id = $1::uuid
AND NOT EXISTS (
SELECT 1
FROM jsonb_to_recordset($2::jsonb) AS x(name text)
WHERE lower(trim(x.name)) = lower(trim(li.name))
)
`

type RemoveItemsFromUserListParams struct {
	ListID uuid.UUID
	Items  json.RawMessage
}

func (q *Queries) RemoveItemsFromUserList(ctx context.Context, arg RemoveItemsFromUserListParams) error {
	_, err := q.db.ExecContext(ctx, removeItemsFromUserList, arg.ListID, arg.Items)
	return err
}

const updateUserList = `-- name: UpdateUserList :exec
INSERT INTO list_items (list_id, name, qty, updated_at)
SELECT $1::uuid, x.name, x.qty, NOW()
FROM jsonb_to_recordset($2::jsonb) AS x(name text, qty smallint)
ON CONFLICT (list_id, name) DO UPDATE
SET qty = EXCLUDED.qty,
    name = EXCLUDED.name,
  updated_at = NOW()
`

type UpdateUserListParams struct {
	ListID uuid.UUID
	Items  json.RawMessage
}

func (q *Queries) UpdateUserList(ctx context.Context, arg UpdateUserListParams) error {
	_, err := q.db.ExecContext(ctx, updateUserList, arg.ListID, arg.Items)
	return err
}
