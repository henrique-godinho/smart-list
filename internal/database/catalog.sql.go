// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: catalog.sql

package database

import (
	"context"
	"database/sql"
)

const getCatalog = `-- name: GetCatalog :many
SELECT c.id,
       c.name,
       c.category_id,
       cat.name AS category_name,
       cat.icon AS category_icon
FROM catalog c
JOIN category cat ON cat.id = c.category_id
ORDER BY cat.id, c.name
`

type GetCatalogRow struct {
	ID           int16
	Name         string
	CategoryID   int16
	CategoryName string
	CategoryIcon sql.NullString
}

func (q *Queries) GetCatalog(ctx context.Context) ([]GetCatalogRow, error) {
	rows, err := q.db.QueryContext(ctx, getCatalog)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCatalogRow
	for rows.Next() {
		var i GetCatalogRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CategoryID,
			&i.CategoryName,
			&i.CategoryIcon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
